{
  "ebookshoppe_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass EBookShoppeUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url_details = 'http://www.awin1.com/cread.php?awinmid=1414&awinaffid=120917&clickref=&p={0}'\n        url = 'http://www.awin1.com/awclick.php?mid=2666&id=120917'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebookshoppe.com/search.php?search_query=' + urllib2.quote(query)\n        br = browser()\n        br.addheaders = [(\"Referer\", \"http://www.ebookshoppe.com/\")]\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[@class=\"ProductList\"]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/'\n                                        'strong/a/@href')).strip()\n                if not id:\n                    continue\n                cover_url = ''.join(data.xpath('./div[@class=\"ProductImage\"]/a/img/@src'))\n                title = ''.join(data.xpath('./div[@class=\"ProductDetails\"]/strong/a/text()'))\n                price = ''.join(data.xpath('./div[@class=\"ProductPriceRating\"]/em/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id\n\n                self.get_author_and_formats(s, timeout)\n                if not s.author:\n                    continue\n\n                yield s\n\n    def get_author_and_formats(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            author = ''.join(idata.xpath('//div[@id=\"ProductOtherDetails\"]/dl/dd[1]/text()'))\n            if author:\n                search_result.author = author\n            formats = idata.xpath('//dl[@class=\"ProductAddToCart\"]/dd/'\n                                  'ul[@class=\"ProductOptionList\"]/li/label/text()')\n            if formats:\n                search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_UNKNOWN\n        return True\n", 
  "wolnelektury": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 3 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012-2014, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass WolneLekturyStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        url = 'http://wolnelektury.pl'\n        detail_url = None\n\n        if detail_item:\n            detail_url = detail_item\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://wolnelektury.pl/szukaj?q=' + urllib.quote_plus(query.encode('utf-8'))\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//li[@class=\"Book-item\"]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"title\"]/a/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"cover-area\"]//img/@src'))\n                title = ''.join(data.xpath('.//div[@class=\"title\"]/a[1]/text()'))\n                author = ', '.join(data.xpath('.//div[@class=\"author\"]/a/text()'))\n                price = '0,00 z\u0142'\n\n                counter -= 1\n\n                s = SearchResult()\n                for link in data.xpath('.//div[@class=\"book-box-formats\"]/span/a'):\n                    ext = ''.join(link.xpath('./text()'))\n                    href = 'http://wolnelektury.pl' + link.get('href')\n                    s.downloads[ext] = href\n                s.cover_url = 'http://wolnelektury.pl' + cover_url.strip()\n                s.title = title.strip()\n                s.author = author\n                s.price = price\n                s.detail_item = 'http://wolnelektury.pl' + id\n                s.formats = ', '.join(s.downloads.keys())\n                s.drm = SearchResult.DRM_UNLOCKED\n\n                yield s\n", 
  "woblink": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 9  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2014, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom base64 import b64encode\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nfrom calibre.ebooks.chardet import strip_encoding_declarations\nfrom calibre.utils.ipc.simple_worker import fork_job, WorkerError\n\njs_browser = '''\nfrom calibre.web.jsbrowser.browser import Browser, Timeout\nimport urllib\n\ndef get_results(url, timeout):\n    browser = Browser(default_timeout=timeout)\n    browser.visit(url)\n    browser.wait_for_element('#nw_content_main')\n    return browser.html\n    '''\n\nclass WoblinkStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/16/58/'\n        url = 'http://woblink.com/publication'\n\n        aff_url = aff_root + str(b64encode(url))\n        detail_url = None\n\n        if detail_item:\n            detail_url = aff_root + str(b64encode('http://woblink.com' + detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://woblink.com/ebooki-kategorie?query=' + urllib.quote_plus(query.encode('utf-8'))\n        if max_results > 10:\n            if max_results > 20:\n                url += '&limit=30'\n            else:\n                url += '&limit=20'\n\n        counter = max_results\n\n        try:\n            results = fork_job(js_browser,'get_results', (url, timeout,), module_is_source_code=True)\n        except WorkerError as e:\n            raise Exception('Could not get results: %s'%e.orig_tb)\n        doc = html.fromstring(strip_encoding_declarations(results['result']))\n        for data in doc.xpath('//div[@class=\"nw_katalog_lista_ksiazka\"]'):\n            if counter <= 0:\n                break\n\n            id = ''.join(data.xpath('.//div[@class=\"nw_katalog_lista_ksiazka_okladka nw_okladka\"]/a[1]/@href'))\n            if not id:\n                continue\n\n            cover_url = ''.join(data.xpath('.//div[@class=\"nw_katalog_lista_ksiazka_okladka nw_okladka\"]/a[1]/img/@src'))\n            title = ''.join(data.xpath('.//h2[@class=\"nw_katalog_lista_ksiazka_detale_tytul\"]/a[1]/text()'))\n            author = ', '.join(data.xpath('.//p[@class=\"nw_katalog_lista_ksiazka_detale_autor\"]/a/text()'))\n            price = ''.join(data.xpath('.//div[@class=\"nw_opcjezakupu_cena\"]/text()'))\n            formats = ', '.join(data.xpath('.//p[@class=\"nw_katalog_lista_ksiazka_detale_format\"]/span/text()'))\n\n            s = SearchResult()\n            s.cover_url = 'http://woblink.com' + cover_url\n            s.title = title.strip()\n            s.author = author.strip()\n            s.price = price + ' z\u0142'\n            s.detail_item = id.strip()\n            s.formats = formats\n\n            if 'DRM' in formats:\n                s.drm = SearchResult.DRM_LOCKED\n\n                counter -= 1\n                yield s\n            else:\n                s.drm = SearchResult.DRM_UNLOCKED\n\n                counter -= 1\n                yield s\n", 
  "libri_de": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 4 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass LibreDEStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://ad.zanox.com/ppc/?18817073C15644254T'\n        url_details = ('http://ad.zanox.com/ppc/?18848208C1197627693T&ULP=[['\n                       'http://www.ebook.de/shop/action/productDetails?artiId={0}]]')\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = ('http://www.ebook.de/de/pathSearch?nav=52122&searchString='\n               + urllib2.quote(query))\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[contains(@class, \"articlecontainer\")]'):\n                if counter <= 0:\n                    break\n\n                details = data.xpath('./div[contains(@class, \"articleinfobox\")]')\n                if not details:\n                    continue\n                details = details[0]\n                id_ = ''.join(details.xpath('./a/@name')).strip()\n                if not id_:\n                    continue\n                title = ''.join(details.xpath('./h3[@class=\"title\"]/a/text()')).strip()\n\n                author = ''.join(details.xpath('.//div[@class=\"author\"]/text()')).strip()\n                if author.startswith('von'):\n                    author = author[4:]\n\n                pdf = details.xpath(\n                        'boolean(.//span[@class=\"bindername\" and contains(text(), \"pdf\")]/text())')\n                epub = details.xpath(\n                        'boolean(.//span[@class=\"bindername\" and contains(text(), \"epub\")]/text())')\n                mobi = details.xpath(\n                        'boolean(.//span[@class=\"bindername\" and contains(text(), \"mobipocket\")]/text())')\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"coverimg\"]/a/img/@src'))\n                price = ''.join(data.xpath('.//div[@class=\"preis\"]/text()')).replace('*', '').strip()\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.detail_item = id_\n                formats = []\n                if epub:\n                    formats.append('ePub')\n                if pdf:\n                    formats.append('PDF')\n                if mobi:\n                    formats.append('MOBI')\n                s.formats = ', '.join(formats)\n\n                yield s\n", 
  "empik": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2014, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass EmpikStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.empik.com/ebooki'\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.empik.com/szukaj/produkt?c=ebooki-ebooki&q=' + urllib.quote(query) + '&qtype=basicForm&start=1&catalogType=pl&searchCategory=3501&resultsPP=' + str(max_results)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"productsSet\"]/div'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[@class=\"productBox-450Title\"]/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"productBox-450Pic\"]/a/img/@data-original'))\n                title = ''.join(data.xpath('.//a[@class=\"productBox-450Title\"]/text()'))\n                title = re.sub(r' \\(ebook\\)', '', title)\n                author = ''.join(data.xpath('.//div[@class=\"productBox-450Author\"]/a/text()'))\n                price = ''.join(data.xpath('.//span[@class=\"currentPrice\"]/text()'))\n                formats = ''.join(data.xpath('.//div[@class=\"productBox-450Type\"]/text()'))\n                formats = re.sub(r'Ebook *,? *','', formats)\n                formats = re.sub(r'\\(.*\\)','', formats)\n                drm = data.xpath('boolean(.//div[@class=\"productBox-450Type\" and contains(text(), \"ADE\")])')\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip() + ' ' + formats\n                s.author = author.strip()\n                s.price = price\n                s.detail_item = 'http://empik.com' + id.strip()\n                s.formats = formats.upper().strip()\n                s.drm = SearchResult.DRM_LOCKED if drm else SearchResult.DRM_UNLOCKED\n\n                yield s\n\n", 
  "kobo": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 3 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport random\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass KoboStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        pub_id = 'sHa5EXvYOwA'\n        # Use Kovid's affiliate id 30% of the time.\n        if random.randint(1, 10) in (1, 2, 3):\n            pub_id = '0dsO3kDu/AU'\n\n        murl = 'http://click.linksynergy.com/fs-bin/click?id=%s&subid=&offerid=280046.1&type=10&tmpid=9310&RD_PARM1=http%%3A%%2F%%2Fkobo.com' % pub_id\n\n        if detail_item:\n            purl = 'http://click.linksynergy.com/link?id=%s&offerid=280046&type=2&murl=%s' % (pub_id, urllib.quote_plus(detail_item))\n            url = purl\n        else:\n            purl = None\n            url = murl\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            d = WebStoreDialog(self.gui, murl, parent, purl)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.kobobooks.com/search/search.html?q=' + urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ul[contains(@class, \"flowview-items\")]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./a[contains(@class, \"block-link\")]/@href'))\n                if not id:\n                    continue\n                id = id[1:]\n\n                price = ''.join(data.xpath('.//a[contains(@class, \"primary-button\")]//text()'))\n\n                cover_url = ''.join(data.xpath('.//img[1]/@src'))\n                cover_url = 'http:%s' % cover_url\n\n                title = ''.join(data.xpath('.//p[contains(@class, \"flowview-item-title\")]//text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.price = price.strip()\n                s.detail_item = 'http://store.kobobooks.com/' + id.strip()\n                s.formats = 'EPUB'\n                s.drm = SearchResult.DRM_UNKNOWN\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            search_result.author = ', '.join(idata.xpath('.//h2[contains(@class, \"author\")]//a/text()'))\n        return True\n", 
  "cdp": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 4 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2013-2014, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass CdpStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/47/58/'\n\n        url = 'https://cdp.pl/ksiazki'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n\n        br = browser()\n        page=1\n\n        counter = max_results\n        while counter:\n            with closing(br.open(u'https://cdp.pl/products/search?utf8=\u2713&keywords=' + urllib.quote_plus(query) + '&page=' + str(page), timeout=timeout)) as f:\n                doc = html.fromstring(f.read())\n                for data in doc.xpath('//ul[@id=\"products\"]/li'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//div[@class=\"product-image\"]/a[1]/@href'))\n                    if not id:\n                        continue\n                    if 'ksiazki' not in id:\n                        continue\n\n                    cover_url = ''.join(data.xpath('.//div[@class=\"product-image\"]/a[1]/@data-background'))\n                    cover_url = cover_url.split('\\'')[1]\n                    title = ''.join(data.xpath('.//div[@class=\"product-description\"]/h2/a/text()'))\n                    author = ''.join(data.xpath('.//div[@class=\"product-description\"]//ul[@class=\"taxons\"]/li[@class=\"author\"]/a/text()'))\n                    price = ''.join(data.xpath('.//span[@itemprop=\"price\"]/text()'))\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = cover_url\n                    s.title = title.strip()\n                    s.author = author.strip()\n                    s.price = price\n                    s.detail_item = id.strip()\n                    s.drm = SearchResult.DRM_UNLOCKED\n\n                    yield s\n                if not doc.xpath('//span[@class=\"next\"]/a'):\n                    break\n            page+=1\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            formats = ', '.join(idata.xpath('//div[@id=\"product-bonus\"]/div/ul/li/text()'))\n            search_result.formats = formats.upper()\n        return True\n", 
  "sony_au": "#!/usr/bin/env python\n#:ts=4:sw=4:sta:et:sts=4:fdm=marker:ai\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__   = 'GPL v3'\n__copyright__ = '2012, Kovid Goyal <kovid at kovidgoyal.net>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html, etree\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass SonyStore(BasicStoreConfig, StorePlugin):\n\n    SEARCH_URL = 'https://au.readerstore.sony.com/catalog/search/?query=%s'\n    STORE_URL = 'https://au.readerstore.sony.com/store/'\n\n    def open(self, parent=None, detail_item=None, external=False):\n        if detail_item:\n            if external or self.config.get('open_external', False):\n                open_url(QUrl(url_slash_cleaner(detail_item)))\n            else:\n                d = WebStoreDialog(self.gui, self.STORE_URL, parent, detail_item)\n                d.setWindowTitle(self.name)\n                d.set_tags(self.config.get('tags', ''))\n                d.exec_()\n        else:\n            open_url(QUrl(self.STORE_URL))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.SEARCH_URL % urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for item in doc.xpath('//div[@id=\"searchresult-list\"]/descendant::div[contains(@class, \"doc-item\")]'):\n                if counter <= 0:\n                    break\n\n                s = SearchResult()\n                s.price = _('Not Available')\n                p = ''.join(item.xpath('descendant::p[@class=\"doc-price\"]/descendant::span[@itemprop=\"price\"]/text()')).strip()\n                if p:\n                    s.price = 'AUD ' + p.split('$')[-1]\n\n                title = item.xpath('descendant::h3[@class=\"doc-title\"]')\n                if not title:\n                    continue\n                title = etree.tostring(title[0], method='text', encoding=unicode)\n                if not title:\n                    continue\n                st = item.xpath('descendant::p[@class=\"doc-subtitle\"]')\n                if st:\n                    st = etree.tostring(st[0], method='text', encoding=unicode)\n                    if st and st.strip():\n                        title = title.strip() + ': ' + st\n                s.title = title.strip()\n                aut = item.xpath('descendant::p[@class=\"doc-author\"]')\n                if not aut:\n                    continue\n                s.author = etree.tostring(aut[0], method='text', encoding=unicode).strip()\n                if not s.author:\n                    continue\n                du = ''.join(item.xpath('descendant::h3[position() = 1 and @class=\"doc-title\"]/descendant::a[position() = 1 and @href]/@href')).strip()\n                if not du:\n                    continue\n                detail_url = 'https://au.readerstore.sony.com'+du\n                s.detail_item = detail_url\n\n                counter -= 1\n\n                cover_url = ''.join(item.xpath(\n                    'descendant::p[@class=\"doc-cover\" and position() = 1]/'\n                    'descendant::img[position() = 1 and @src]/@src'))\n                if cover_url:\n                    s.cover_url = url_slash_cleaner(cover_url)\n\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Sony'\n\n                yield s\n\n", 
  "litres": "\ufeff# -*- coding: utf-8 -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, Roman Mukhin <ramses_ru at hotmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport random\nimport re\nimport urllib2\n\nfrom contextlib import closing\nfrom lxml import etree\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner, prints\nfrom calibre.ebooks.chardet import xml_to_unicode\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass LitResStore(BasicStoreConfig, StorePlugin):\n    shop_url = u'http://www.litres.ru'\n    #http://robot.litres.ru/pages/biblio_book/?art=174405\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        aff_id = u'?' + _get_affiliate_id()\n\n        url = self.shop_url + aff_id\n        detail_url = None\n        if detail_item:\n            # http://www.litres.ru/pages/biblio_book/?art=157074\n            detail_url = self.shop_url + u'/pages/biblio_book/' + aff_id +\\\n                u'&art=' + urllib2.quote(detail_item)\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n\n    def search(self, query, max_results=10, timeout=60):\n        search_url = u'http://robot.litres.ru/pages/catalit_browser/?checkpoint=2000-01-02&'\\\n        'search=%s&limit=0,%s'\n        search_url = search_url % (urllib2.quote(query), max_results)\n\n        counter = max_results\n        br = browser()\n        br.addheaders.append( ['Accept-Encoding','gzip'] )\n\n        with closing(br.open(search_url, timeout=timeout)) as r:\n            ungzipResponse(r,br)\n            raw= xml_to_unicode(r.read(), strip_encoding_pats=True, assume_utf8=True)[0]\n\n            parser = etree.XMLParser(recover=True, no_network=True)\n            doc = etree.fromstring(raw, parser=parser)\n            for data in doc.xpath('//*[local-name() = \"fb2-book\"]'):\n                if counter <= 0:\n                    break\n                counter -= 1\n\n                try:\n                    sRes = self.create_search_result(data)\n                except Exception as e:\n                    prints('ERROR: cannot parse search result #%s: %s'%(max_results - counter + 1, e))\n                    continue\n                yield sRes\n\n    def get_details(self, search_result, timeout=60):\n        pass\n\n    def create_search_result(self, data):\n        xp_template = 'normalize-space(@{0})'\n\n        sRes = SearchResult()\n        sRes.drm = SearchResult.DRM_UNLOCKED\n        sRes.detail_item = data.xpath(xp_template.format('hub_id'))\n        sRes.title = data.xpath('string(.//title-info/book-title/text()|.//publish-info/book-name/text())')\n        #aut = concat('.//title-info/author/first-name', ' ')\n        authors = data.xpath('.//title-info/author/first-name/text()|'\\\n        './/title-info/author/middle-name/text()|'\\\n        './/title-info/author/last-name/text()')\n        sRes.author = u' '.join(map(unicode, authors))\n        sRes.price = data.xpath(xp_template.format('price'))\n        # cover vs cover_preview\n        sRes.cover_url = data.xpath(xp_template.format('cover_preview'))\n        sRes.price = format_price_in_RUR(sRes.price)\n\n        types = data.xpath('//fb2-book//files/file/@type')\n        fmt_set = _parse_ebook_formats(' '.join(types))\n        sRes.formats = ', '.join(fmt_set)\n        return sRes\n\ndef format_price_in_RUR(price):\n    '''\n    Try to format price according ru locale: '12 212,34 \u0440\u0443\u0431.'\n    @param price: price in format like 25.99\n    @return: formatted price if possible otherwise original value\n    @rtype: unicode\n    '''\n    if price and re.match(\"^\\d*?\\.\\d*?$\", price):\n        try:\n            price = u'{:,.2F} \u0440\u0443\u0431.'.format(float(price))\n            price = price.replace(',', ' ').replace('.', ',', 1)\n        except:\n            pass\n    return price\n\ndef ungzipResponse(r,b):\n    headers = r.info()\n    if headers['Content-Encoding']=='gzip':\n        import gzip\n        gz = gzip.GzipFile(fileobj=r, mode='rb')\n        data = gz.read()\n        gz.close()\n        #headers[\"Content-type\"] = \"text/html; charset=utf-8\"\n        r.set_data( data )\n        b.set_response(r)\n\ndef _get_affiliate_id():\n    aff_id = u'3623565'\n    # Use Kovid's affiliate id 30% of the time.\n    if random.randint(1, 10) in (1, 2, 3):\n        aff_id = u'4084465'\n    return u'lfrom=' + aff_id\n\ndef _parse_ebook_formats(formatsStr):\n    '''\n    Creates a set with displayable names of the formats\n\n    :param formatsStr: string with comma separated book formats\n           as it provided by ozon.ru\n    :return: a list with displayable book formats\n    '''\n\n    formatsUnstruct = formatsStr.lower()\n    formats = set()\n    if 'fb2' in formatsUnstruct:\n        formats.add('FB2')\n    if 'html' in formatsUnstruct:\n        formats.add('HTML')\n    if 'txt' in formatsUnstruct:\n        formats.add('TXT')\n    if 'rtf' in formatsUnstruct:\n        formats.add('RTF')\n    if 'pdf' in formatsUnstruct:\n        formats.add('PDF')\n    if 'prc' in formatsUnstruct:\n        formats.add('PRC')\n    if 'lit' in formatsUnstruct:\n        formats.add('PRC')\n    if 'epub' in formatsUnstruct:\n        formats.add('ePub')\n    if 'rb' in formatsUnstruct:\n        formats.add('RB')\n    if 'isilo3' in formatsUnstruct:\n        formats.add('ISILO3')\n    if 'lrf' in formatsUnstruct:\n        formats.add('LRF')\n    if 'jar' in formatsUnstruct:\n        formats.add('JAR')\n    return formats\n", 
  "amazon_es": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom contextlib import closing\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre.gui2.store import StorePlugin\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass AmazonESKindleStore(StorePlugin):\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    aff_id = {'tag': 'charhale09-21'}\n    store_link = ('http://www.amazon.es/ebooks-kindle/b?_encoding=UTF8&'\n                  'node=827231031&tag=%(tag)s&ie=UTF8&linkCode=ur2&camp=3626&creative=24790')\n    store_link_details = ('http://www.amazon.es/gp/redirect.html?ie=UTF8&'\n                          'location=http://www.amazon.es/dp/%(asin)s&tag=%(tag)s'\n                          '&linkCode=ur2&camp=3626&creative=24790')\n    search_url = 'http://www.amazon.es/s/?url=search-alias%3Ddigital-text&field-keywords='\n\n    author_article = 'de '\n\n    and_word = ' y '\n\n    # ---- Copy from here to end\n\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        store_link = self.store_link % self.aff_id\n        if detail_item:\n            self.aff_id['asin'] = detail_item\n            store_link = self.store_link_details % self.aff_id\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.search_url + query.encode('ascii', 'backslashreplace').replace('%', '%25').replace('\\\\x', '%').replace(' ', '+')\n        #print(url)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            allText = f.read()\n            doc = html.fromstring(allText)#.decode('latin-1', 'replace'))\n\n            if doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"grid\")]'):\n                #print('grid form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"ilresults\")]'):\n                #print('ilo form')\n                data_xpath = '//li[(@class=\"ilo\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                # Results can be in a grid (table) or a column\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"list\")]'):\n                #print('list form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            else:\n                # URK -- whats this?\n                print('unknown result table form for Amazon EU search')\n                #with open(\"c:/amazon_search_results.html\", \"w\") as out:\n                #    out.write(allText)\n                return\n\n\n            for data in doc.xpath(data_xpath):\n                if counter <= 0:\n                    break\n\n                # Even though we are searching digital-text only Amazon will still\n                # put in results for non Kindle books (authors pages). Se we need\n                # to explicitly check if the item is a Kindle book and ignore it\n                # if it isn't.\n                format_ = ''.join(data.xpath(format_xpath))\n                if 'kindle' not in format_.lower():\n                    continue\n\n                # We must have an asin otherwise we can't easily reference the\n                # book later.\n                asin = data.xpath(asin_xpath)\n                if asin:\n                    asin = asin[0]\n                else:\n                    continue\n\n                cover_url = ''.join(data.xpath(cover_xpath))\n\n                title = ''.join(data.xpath(title_xpath))\n\n                authors = ''.join(data.xpath(author_xpath))\n                authors = re.sub('^' + self.author_article, '', authors)\n                authors = re.sub(self.and_word, ' & ', authors)\n                mo = re.match(r'(.*)(\\(\\d.*)$', authors)\n                if mo:\n                    authors = mo.group(1).strip()\n\n                price = ''.join(data.xpath(price_xpath))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url.strip()\n                s.title = title.strip()\n                s.author = authors.strip()\n                s.price = price.strip()\n                s.detail_item = asin.strip()\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Kindle'\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        pass\n\n", 
  "chitanka": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, Alex Stanev <alex@stanev.org>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass ChitankaStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://chitanka.info'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url + detail_item\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url + detail_item\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        # check for cyrillic symbols before performing search\n        uquery = unicode(query.strip(), 'utf-8')\n        reObj = re.search(u'^[\u0430-\u044f\u0410-\u042f\\\\d\\\\s]{3,}$', uquery)\n        if not reObj:\n            return\n\n        base_url = 'http://chitanka.info'\n        url = base_url + '/search?q=' +  urllib2.quote(query)\n        counter = max_results\n\n        # search for book title\n        br = browser()\n        try:\n            with closing(br.open(url, timeout=timeout)) as f:\n                f = unicode(f.read(), 'utf-8')\n                doc = html.fromstring(f)\n\n                for data in doc.xpath('//ul[@class=\"superlist booklist\"]/li'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//a[@class=\"booklink\"]/@href')).strip()\n                    if not id:\n                        continue\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = ''.join(data.xpath('.//a[@class=\"booklink\"]/img/@src')).strip()\n                    s.title = ''.join(data.xpath('.//a[@class=\"booklink\"]/i/text()')).strip()\n                    s.author = ''.join(data.xpath('.//span[@class=\"bookauthor\"]/a/text()')).strip()\n                    s.detail_item = id\n                    s.drm = SearchResult.DRM_UNLOCKED\n                    s.downloads['FB2'] = base_url + ''.join(data.xpath('.//a[@class=\"dl dl-fb2\"]/@href')).strip().replace('.zip', '')\n                    s.downloads['EPUB'] = base_url + ''.join(data.xpath('.//a[@class=\"dl dl-epub\"]/@href')).strip().replace('.zip', '')\n                    s.downloads['TXT'] = base_url + ''.join(data.xpath('.//a[@class=\"dl dl-txt\"]/@href')).strip().replace('.zip', '')\n                    s.formats = 'FB2, EPUB, TXT, SFB'\n                    yield s\n        except urllib2.HTTPError, e:\n            if e.code == 404:\n                return\n            else:\n                raise\n\n        # search for author names\n        for data in doc.xpath('//ul[@class=\"superlist\"][1]/li/dl/dt'):\n            author_url = ''.join(data.xpath('.//a[contains(@href,\"/person/\")]/@href'))\n            if author_url == '':\n                continue\n            if counter <= 0:\n                break\n\n            br2 = browser()\n            with closing(br2.open(base_url + author_url, timeout=timeout)) as f:\n                if counter <= 0:\n                    break\n                f = unicode(f.read(), 'utf-8')\n                doc2 = html.fromstring(f)\n\n                # search for book title\n                for data in doc2.xpath('//ul[@class=\"superlist booklist\"]/li'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//a[@class=\"booklink\"]/@href')).strip()\n                    if not id:\n                        continue\n\n                    title = ''.join(data.xpath('.//a[@class=\"booklink\"]/i/text()')).strip()\n                    author = ''.join(data.xpath('.//span[@class=\"bookauthor\"]/a/text()')).strip()\n                    if title.lower().find(query.lower()) == -1 and author.lower().find(query.lower()) == -1:\n                        continue\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = ''.join(data.xpath('.//a[@class=\"booklink\"]/img/@src')).strip()\n                    s.title = title\n                    s.author = author\n                    s.detail_item = id\n                    s.drm = SearchResult.DRM_UNLOCKED\n                    s.downloads['FB2'] = base_url + ''.join(data.xpath('.//a[@class=\"dl dl-fb2\"]/@href')).strip().replace('.zip', '')\n                    s.downloads['EPUB'] = base_url + ''.join(data.xpath('.//a[@class=\"dl dl-epub\"]/@href')).strip().replace('.zip', '')\n                    s.downloads['TXT'] = base_url + ''.join(data.xpath('.//a[@class=\"dl dl-txt\"]/@href')).strip().replace('.zip', '')\n                    s.formats = 'FB2, EPUB, TXT, SFB'\n                    yield s\n", 
  "gutenberg": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 4  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, 2013, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport base64\nimport mimetypes\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import etree\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.constants import __version__\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore\nfrom calibre.gui2.store.search_result import SearchResult\n\nweb_url = 'http://m.gutenberg.org/'\n\ndef fix_url(url):\n    if url and url.startswith('//'):\n        url = 'http:' + url\n    return url\n\ndef search(query, max_results=10, timeout=60):\n    url = 'http://m.gutenberg.org/ebooks/search.opds/?query=' + urllib.quote_plus(query)\n\n    counter = max_results\n    br = browser(user_agent='calibre/'+__version__)\n    with closing(br.open(url, timeout=timeout)) as f:\n        doc = etree.fromstring(f.read())\n        for data in doc.xpath('//*[local-name() = \"entry\"]'):\n            if counter <= 0:\n                break\n\n            counter -= 1\n\n            s = SearchResult()\n\n            # We could use the <link rel=\"alternate\" type=\"text/html\" ...> tag from the\n            # detail odps page but this is easier.\n            id = ''.join(data.xpath('./*[local-name() = \"id\"]/text()')).strip()\n            s.detail_item = fix_url(url_slash_cleaner('%s/ebooks/%s' % (web_url, re.sub('[^\\d]', '', id))))\n            if not s.detail_item:\n                continue\n\n            s.title = ' '.join(data.xpath('./*[local-name() = \"title\"]//text()')).strip()\n            s.author = ', '.join(data.xpath('./*[local-name() = \"content\"]//text()')).strip()\n            if not s.title or not s.author:\n                continue\n\n            # Get the formats and direct download links.\n            with closing(br.open(id, timeout=timeout/4)) as nf:\n                ndoc = etree.fromstring(nf.read())\n                for link in ndoc.xpath('//*[local-name() = \"link\" and @rel = \"http://opds-spec.org/acquisition\"]'):\n                    type = link.get('type')\n                    href = link.get('href')\n                    if type:\n                        ext = mimetypes.guess_extension(type)\n                        if ext:\n                            ext = ext[1:].upper().strip()\n                            s.downloads[ext] = fix_url(href)\n\n            s.formats = ', '.join(s.downloads.keys())\n            if not s.formats:\n                continue\n\n            for link in data.xpath('./*[local-name() = \"link\"]'):\n                rel = link.get('rel')\n                href = link.get('href')\n                type = link.get('type')\n\n                if rel and href and type:\n                    href = fix_url(href)\n                    if rel in ('http://opds-spec.org/thumbnail', 'http://opds-spec.org/image/thumbnail'):\n                        if href.startswith('data:image/png;base64,'):\n                            s.cover_data = base64.b64decode(href.replace('data:image/png;base64,', ''))\n\n            yield s\n\nclass GutenbergStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = 'http://www.gutenberg.org/catalog/osd-books.xml'\n    web_url = web_url\n\n    def search(self, query, max_results=10, timeout=60):\n        '''\n        Gutenberg's ODPS feed is poorly implmented and has a number of issues\n        which require very special handling to fix the results.\n\n        Issues:\n          * \"Sort Alphabetically\" and \"Sort by Release Date\" are returned\n            as book entries.\n          * The author is put into a \"content\" tag and not the author tag.\n          * The link to the book itself goes to an odps page which we need\n            to turn into a link to a web page.\n          * acquisition links are not part of the search result so we have\n            to go to the odps item itself. Detail item pages have a nasty\n            note saying:\n              DON'T USE THIS PAGE FOR SCRAPING.\n              Seriously. You'll only get your IP blocked.\n            We're using the ODPS feed because people are getting blocked with\n            the previous implementation so due to this using ODPS probably\n            won't solve this issue.\n          * Images are not links but base64 encoded strings. They are also not\n            real cover images but a little blue book thumbnail.\n        '''\n        for result in search(query, max_results, timeout):\n            yield result\n", 
  "nook_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 4  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass NookUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.nook.com/gb/store'\n        detail_url = ''\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = detail_url + detail_item\n\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            if detail_item:\n                detail_url = detail_url + detail_item\n            else:\n                detail_url = None\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = u'http://uk.nook.com/s/%s?s%%5Bdref%%5D=1&s%%5Bkeyword%%5D=%s' % (query.replace(' ', '-'), urllib.quote(query))\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            raw = f.read()\n            doc = html.fromstring(raw)\n            for data in doc.xpath('//ul[contains(@class, \"product_list\")]/li'):\n                if counter <= 0:\n                    break\n\n                id_ = ''.join(data.xpath('.//span[contains(@class, \"image\")]/a/@href'))\n                if not id_:\n                    continue\n                if id_.startswith('/gb'):\n                    id_ = id_[3:]\n                id_ = 'http://uk.nook.com' + id_.strip()\n\n                cover_url = ''.join(data.xpath('.//span[contains(@class, \"image\")]//img/@data-src'))\n\n                title = ''.join(data.xpath('.//div[contains(@class, \"title\")]//text()')).strip()\n                if not title:\n                    continue\n\n                author = ', '.join(data.xpath('.//div[contains(@class, \"contributor\")]//a/text()')).strip()\n                price = ''.join(data.xpath('.//div[contains(@class, \"action\")]//a//text()')).strip()\n                price = re.sub(r'[^\\d.,\u00a3]', '', price)\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = id_\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Nook'\n\n                yield s\n", 
  "waterstones_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass WaterstonesUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.awin1.com/awclick.php?mid=3787&id=120917'\n        url_details = 'http://www.awin1.com/cread.php?awinmid=3787&awinaffid=120917&clickref=&p={0}'\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.waterstones.com/waterstonesweb/simpleSearch.do?simpleSearchString=ebook+' + urllib2.quote(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[contains(@class, \"results-pane\")]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('./div/div/h2/a/@href')).strip()\n                if not id:\n                    continue\n                cover_url = ''.join(data.xpath('.//div[@class=\"image\"]/a/img/@src'))\n                if not cover_url.startswith(\"http\"):\n                    cover_url = 'http://www.waterstones.com' + cover_url\n                title = ''.join(data.xpath('./div/div/h2/a/text()'))\n                author = ', '.join(data.xpath('.//p[@class=\"byAuthor\"]/a/text()'))\n                price = ''.join(data.xpath('.//p[@class=\"price\"]/span[@class=\"priceRed2\"]/text()'))\n                drm = data.xpath('boolean(.//td[@headers=\"productFormat\" and contains(., \"DRM\")])')\n                pdf = data.xpath('boolean(.//td[@headers=\"productFormat\" and contains(., \"PDF\")])')\n                epub = data.xpath('boolean(.//td[@headers=\"productFormat\" and contains(., \"EPUB\")])')\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                if drm:\n                    s.drm = SearchResult.DRM_LOCKED\n                else:\n                    s.drm = SearchResult.DRM_UNKNOWN\n                s.detail_item = id\n                formats = []\n                if epub:\n                    formats.append('ePub')\n                if pdf:\n                    formats.append('PDF')\n                s.formats = ', '.join(formats)\n\n                yield s\n", 
  "publio": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 4 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012-2014, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass PublioStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        google_analytics = '?utm_source=tdcalibre&utm_medium=calibre'\n        url = 'http://www.publio.pl/' + google_analytics\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner((detail_item + google_analytics) if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item if detail_item else url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=20, timeout=60):\n\n        br = browser()\n\n        counter = max_results\n        page = 1\n        while counter:\n            with closing(br.open('http://www.publio.pl/szukaj,strona' + str(page) + '.html?q=' + urllib.quote(query) + '&sections=EMAGAZINE&sections=MINIBOOK&sections=EBOOK', timeout=timeout)) as f:\n                doc = html.fromstring(f.read())\n                for data in doc.xpath('//div[@class=\"item\"]'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//div[@class=\"img\"]/a/@href'))\n                    if not id:\n                        continue\n\n                    cover_url = ''.join(data.xpath('.//div[@class=\"img\"]/a/img/@data-original'))\n                    title = ''.join(data.xpath('.//div[@class=\"img\"]/a/@title'))\n                    title2 = ''.join(data.xpath('.//div[@class=\"desc\"]/h5//text()'))\n                    if title2:\n                        title = title + '. ' + title2\n                    if (''.join(data.xpath('./div[@class=\"desc\"]/div[@class=\"detailShortList\"]/div[last()]/span/text()')).strip() == \"Seria:\"):\n                        series = ''.join(data.xpath('./div[@class=\"desc\"]/div[@class=\"detailShortList\"]/div[last()]/a/@title'))\n                        title = title + ' (seria ' + series + ')'\n                    author = ', '.join(data.xpath('./div[@class=\"desc\"]/div[@class=\"detailShortList\"]/div[@class=\"row\"][1]/a/@title'))\n                    price = ''.join(data.xpath('.//div[@class=\"priceBox tk-museo-slab\"]/ins/text()'))\n                    if not price:\n                        price = ''.join(data.xpath('.//div[@class=\"priceBox tk-museo-slab\"]/text()')).strip()\n                    formats = ', '.join([x.strip() for x in data.xpath('.//div[@class=\"formats\"]/a/text()')])\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = 'http://www.publio.pl' + cover_url\n                    s.title = title.strip()\n                    s.author = author\n                    s.price = price\n                    s.detail_item = 'http://www.publio.pl' + id.strip()\n                    s.drm = SearchResult.DRM_LOCKED if 'DRM' in formats else SearchResult.DRM_UNLOCKED\n                    s.formats = formats.replace(' DRM','').strip()\n\n                    yield s\n                if not doc.xpath('boolean(//a[@class=\"next\"])'):\n                    break\n                page+=1\n", 
  "legimi": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2014, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass LegimiStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/9/58/'\n\n        url = 'http://www.legimi.com/pl/ebooki/'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.legimi.com/pl/ebooki/?szukaj=' + urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@id=\"listBooks\"]/div'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[1]/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//img[1]/@src'))\n                title = ''.join(data.xpath('.//span[@class=\"bookListTitle ellipsis\"]/text()'))\n                author = ''.join(data.xpath('.//span[@class=\"bookListAuthor ellipsis\"]/text()'))\n                price = ''.join(data.xpath('.//div[@class=\"bookListPrice\"]/span/text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = 'http://www.legimi.com/' + cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.detail_item = 'http://www.legimi.com/' + id.strip()\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        drm_pattern = re.compile(\"zabezpieczona DRM\")\n        formats = []\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            formatlist = idata.xpath('.//div[@id=\"fullBookFormats\"]//span[@class=\"bookFormat\"]/text()')\n            for x in formatlist:\n                if x.strip() not in formats:\n                    formats.append(x.strip())\n            drm = drm_pattern.search(''.join(idata.xpath('.//div[@id=\"fullBookFormats\"]/p/text()')))\n            search_result.formats = ', '.join(formats)\n            search_result.drm = SearchResult.DRM_LOCKED if drm else SearchResult.DRM_UNLOCKED\n        return True\n", 
  "nexto": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 3 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2013, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass NextoStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        pid = '155711'\n\n        url = 'http://www.nexto.pl/ebooki_c1015.xml'\n        detail_url = None\n\n        if detail_item:\n            book_id = re.search(r'p[0-9]*\\.xml\\Z', detail_item)\n            book_id = book_id.group(0).replace('.xml','').replace('p','')\n            if book_id:\n                detail_url = 'http://www.nexto.pl/rf/pr?p=' + book_id + '&pid=' + pid\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.nexto.pl/szukaj.xml?search-clause=' + urllib.quote_plus(query) + '&scid=1015'\n\n        br = browser()\n        offset=0\n\n        counter = max_results\n\n        while counter:\n            with closing(br.open(url + '&_offset=' + str(offset), timeout=timeout)) as f:\n                doc = html.fromstring(f.read())\n                for data in doc.xpath('//ul[@class=\"productslist\"]/li'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//div[@class=\"cover_container\"]/a[1]/@href'))\n                    if not id:\n                        continue\n\n                    price = ''.join(data.xpath('.//strong[@class=\"nprice\"]/text()'))\n\n                    cover_url = ''.join(data.xpath('.//img[@class=\"cover\"]/@src'))\n                    cover_url = re.sub(r'%2F', '/', cover_url)\n                    cover_url = re.sub(r'widthMax=120&heightMax=200', 'widthMax=64&heightMax=64', cover_url)\n                    title = ''.join(data.xpath('.//a[@class=\"title\"]/text()'))\n                    title = re.sub(r' - ebook$', '', title)\n                    formats = ', '.join(data.xpath('.//ul[@class=\"formats_available\"]/li//b/text()'))\n                    DrmFree = re.search(r'znak', formats)\n                    formats = re.sub(r'\\ ?\\(.+?\\)', '', formats)\n\n                    author = ''\n                    with closing(br.open('http://www.nexto.pl/' + id.strip(), timeout=timeout/4)) as nf:\n                        idata = html.fromstring(nf.read())\n                        author = ', '.join(idata.xpath('//div[@class=\"basic_data\"]/p[1]/b/a/text()'))\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = cover_url if cover_url[:4] == 'http' else 'http://www.nexto.pl' + cover_url\n                    s.title = title.strip()\n                    s.author = author.strip()\n                    s.price = price\n                    s.detail_item = id.strip()\n                    s.drm = SearchResult.DRM_UNLOCKED if DrmFree else SearchResult.DRM_LOCKED\n                    s.formats = formats.upper().strip()\n\n                    yield s\n                if not doc.xpath('//div[@class=\"listnavigator\"]//a[@class=\"next\"]'):\n                    break\n            offset+=10\n", 
  "eknigi": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, Alex Stanev <alex@stanev.org>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport random\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass eKnigiStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        # Use Kovid's affiliate id 30% of the time\n        if random.randint(1, 10) in (1, 2, 3):\n            aff_suffix = '&amigosid=23'\n        else:\n            aff_suffix = '&amigosid=22'\n        url = 'http://e-knigi.net/?' + aff_suffix[1:]\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = detail_item + aff_suffix\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            detail_url = None\n            if detail_item:\n                url = detail_item + aff_suffix\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        # check for cyrillic symbols before performing search\n        uquery = unicode(query.strip(), 'utf-8')\n        reObj = re.search(u'^[\u0430-\u044f\u0410-\u042f\\\\d\\\\s]{2,}$', uquery)\n        if not reObj:\n            return\n\n        base_url = 'http://e-knigi.net'\n        url = base_url + '/virtuemart?page=shop.browse&search_category=0&search_limiter=anywhere&keyword=' + urllib2.quote(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n\n            # if the store finds only one product, it opens directly detail view\n            for data in doc.xpath('//div[@class=\"prod_details\"]'):\n                s = SearchResult()\n                s.cover_url = ''.join(data.xpath('.//div[@class=\"vm_main_info clearfix\"]/div[@class=\"lf\"]/a/img/@src')).strip()\n                s.title = ''.join(data.xpath('.//div[@class=\"vm_main_info clearfix\"]/div[@class=\"lf\"]/a/img/@alt')).strip()\n                s.author = ''.join(data.xpath('.//div[@class=\"td_bg clearfix\"]/div[@class=\"gk_product_tab\"]/div/table/tr[3]/td[2]/text()')).strip()\n                s.price = ''.join(data.xpath('.//span[@class=\"productPrice\"]/text()')).strip()\n                s.detail_item = url\n                s.drm = SearchResult.DRM_UNLOCKED\n\n                yield s\n                return\n\n            # search in store results\n            for data in doc.xpath('//div[@class=\"browseProductContainer\"]'):\n                if counter <= 0:\n                    break\n                id = ''.join(data.xpath('.//a[1]/@href')).strip()\n                if not id:\n                    continue\n\n                title = ''.join(data.xpath('.//a[@class=\"gk_vm_product_image\"]/img/@title')).strip()\n                author = ''.join(data.xpath('.//div[@style=\"float:left;width:90%\"]/b/text()')).strip().replace('\u0410\u0432\u0442\u043e\u0440: ', '')\n\n                if title.lower().find(query.lower()) == -1 and author.lower().find(query.lower()) == -1:\n                    continue\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = ''.join(data.xpath('.//a[@class=\"gk_vm_product_image\"]/img/@src')).strip()\n                s.title = title\n                s.author = author\n                s.price = ''.join(data.xpath('.//span[@class=\"productPrice\"]/text()')).strip()\n                s.detail_item = base_url + id\n                s.drm = SearchResult.DRM_UNLOCKED\n\n                yield s\n", 
  "amazon_ca": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass AmazonCAKindleStore(StorePlugin):\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    search_url = 'http://www.amazon.ca/s/url=search-alias%3Ddigital-text&field-keywords='\n    details_url = 'http://amazon.ca/dp/'\n    drm_search_text = u'Simultaneous Device Usage'\n    drm_free_text = u'Unlimited'\n\n    def open(self, parent=None, detail_item=None, external=False):\n        #aff_id = {'tag': ''}\n        # Use Kovid's affiliate id 30% of the time.\n        # if random.randint(1, 10) in (1, 2, 3):\n        #    aff_id['tag'] = 'calibrebs-20'\n        # store_link = 'http://www.amazon.ca/Kindle-eBooks/b/?ie=UTF&node=1286228011&ref_=%(tag)s&ref=%(tag)s&tag=%(tag)s&linkCode=ur2&camp=1789&creative=390957' % aff_id\n        store_link = 'http://www.amazon.ca/ebooks-kindle/b/ref=sa_menu_kbo?ie=UTF8&node=2980423011'\n        if detail_item:\n            # aff_id['asin'] = detail_item\n            # store_link = 'http://www.amazon.ca/dp/%(asin)s/?tag=%(tag)s' % aff_id\n            store_link = 'http://www.amazon.ca/dp/' + detail_item + '/'\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.search_url + query.encode('ascii', 'backslashreplace').replace('%', '%25').replace('\\\\x', '%').replace(' ', '+')\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n\n            if doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"grid\")]'):\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"ilresults\")]'):\n                data_xpath = '//li[(@class=\"ilo\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                # Results can be in a grid (table) or a column\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"list\")]'):\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            else:\n                return\n\n            for data in doc.xpath(data_xpath):\n                if counter <= 0:\n                    break\n\n                # Even though we are searching digital-text only Amazon will still\n                # put in results for non Kindle books (author pages). Se we need\n                # to explicitly check if the item is a Kindle book and ignore it\n                # if it isn't.\n                format = ''.join(data.xpath(format_xpath))\n                if 'kindle' not in format.lower():\n                    continue\n\n                # We must have an asin otherwise we can't easily reference the\n                # book later.\n                asin = data.xpath(asin_xpath)\n                if asin:\n                    asin = asin[0]\n                else:\n                    continue\n\n                cover_url = ''.join(data.xpath(cover_xpath))\n\n                title = ''.join(data.xpath(title_xpath))\n                author = ''.join(data.xpath(author_xpath))\n                try:\n                    author = author.split('by ', 1)[1].split(\" (\")[0]\n                except:\n                    pass\n\n                price = ''.join(data.xpath(price_xpath))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url.strip()\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = asin.strip()\n                s.formats = 'Kindle'\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        url = self.details_url\n\n        br = browser()\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           self.drm_search_text + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               self.drm_free_text + '\") and contains(b, \"' +\n                               self.drm_search_text + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n", 
  "ebook_nl": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass EBookNLStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.ebook.nl/'\n        url_details = ('http://www.ebook.nl/store/{0}')\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = ('http://www.ebook.nl/store/advanced_search_result.php?keywords='\n               + urllib2.quote(query))\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//table[contains(@class, \"productListing\")]/tr'):\n                if counter <= 0:\n                    break\n\n                details = data.xpath('./td/div[@class=\"prodImage\"]/a')\n                if not details:\n                    continue\n                details = details[0]\n                id = ''.join(details.xpath('./@href')).strip()\n                id = id[id.rfind('/')+1:]\n                i = id.rfind('?')\n                if i > 0:\n                    id = id[:i]\n                if not id:\n                    continue\n                cover_url = 'http://www.ebook.nl/store/' + ''.join(details.xpath('./img/@src'))\n                title = ''.join(details.xpath('./img/@title')).strip()\n                author = ''.join(data.xpath('./td/div[@class=\"prodTitle\"]/h3/a/text()')).strip()\n                price = ''.join(data.xpath('./td/div[@class=\"prodTitle\"]/b/text()'))\n                pdf = data.xpath('boolean(./td/div[@class=\"prodTitle\"]/'\n                                   'p[contains(text(), \"Bestandsformaat: Pdf\")])')\n                epub = data.xpath('boolean(./td/div[@class=\"prodTitle\"]/'\n                                   'p[contains(text(), \"Bestandsformaat: ePub\")])')\n                nodrm = data.xpath('boolean(./td/div[@class=\"prodTitle\"]/'\n                                   'p[contains(text(), \"zonder DRM\") or'\n                                   '  contains(text(), \"watermerk\")])')\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                if nodrm:\n                    s.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    s.drm = SearchResult.DRM_LOCKED\n                s.detail_item = id\n                formats = []\n                if epub:\n                    formats.append('ePub')\n                if pdf:\n                    formats.append('PDF')\n                s.formats = ','.join(formats)\n\n                yield s\n", 
  "feedbooks": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass FeedbooksStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = 'http://assets0.feedbooks.net/opensearch.xml?t=1253087147'\n    web_url = 'http://feedbooks.com/'\n\n    # http://www.feedbooks.com/catalog\n\n    def search(self, query, max_results=10, timeout=60):\n        for s in OpenSearchOPDSStore.search(self, query, max_results, timeout):\n            if s.downloads:\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.price = '$0.00'\n            else:\n                s.drm = SearchResult.DRM_LOCKED\n                s.formats = 'EPUB'\n            yield s\n", 
  "amazon_it": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom contextlib import closing\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre.gui2.store import StorePlugin\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass AmazonITKindleStore(StorePlugin):\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    aff_id = {'tag': 'httpcharles07-21'}\n    store_link = ('http://www.amazon.it/ebooks-kindle/b?_encoding=UTF8&'\n                  'node=827182031&tag=%(tag)s&ie=UTF8&linkCode=ur2&camp=3370&creative=23322')\n    store_link_details = ('http://www.amazon.it/gp/redirect.html?ie=UTF8&'\n                          'location=http://www.amazon.it/dp/%(asin)s&tag=%(tag)s&'\n                          'linkCode=ur2&camp=3370&creative=23322')\n    search_url = 'http://www.amazon.it/s/?url=search-alias%3Ddigital-text&field-keywords='\n\n    author_article = 'di '\n\n    and_word = ' e '\n\n    # ---- Copy from here to end\n\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        store_link = self.store_link % self.aff_id\n        if detail_item:\n            self.aff_id['asin'] = detail_item\n            store_link = self.store_link_details % self.aff_id\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.search_url + query.encode('ascii', 'backslashreplace').replace('%', '%25').replace('\\\\x', '%').replace(' ', '+')\n        #print(url)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            allText = f.read()\n            doc = html.fromstring(allText)#.decode('latin-1', 'replace'))\n\n            if doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"grid\")]'):\n                #print('grid form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"ilresults\")]'):\n                #print('ilo form')\n                data_xpath = '//li[(@class=\"ilo\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                # Results can be in a grid (table) or a column\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"list\")]'):\n                #print('list form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            else:\n                # URK -- whats this?\n                print('unknown result table form for Amazon EU search')\n                #with open(\"c:/amazon_search_results.html\", \"w\") as out:\n                #    out.write(allText)\n                return\n\n\n            for data in doc.xpath(data_xpath):\n                if counter <= 0:\n                    break\n\n                # Even though we are searching digital-text only Amazon will still\n                # put in results for non Kindle books (authors pages). Se we need\n                # to explicitly check if the item is a Kindle book and ignore it\n                # if it isn't.\n                format_ = ''.join(data.xpath(format_xpath))\n                if 'kindle' not in format_.lower():\n                    continue\n\n                # We must have an asin otherwise we can't easily reference the\n                # book later.\n                asin = data.xpath(asin_xpath)\n                if asin:\n                    asin = asin[0]\n                else:\n                    continue\n\n                cover_url = ''.join(data.xpath(cover_xpath))\n\n                title = ''.join(data.xpath(title_xpath))\n\n                authors = ''.join(data.xpath(author_xpath))\n                authors = re.sub('^' + self.author_article, '', authors)\n                authors = re.sub(self.and_word, ' & ', authors)\n                mo = re.match(r'(.*)(\\(\\d.*)$', authors)\n                if mo:\n                    authors = mo.group(1).strip()\n\n                price = ''.join(data.xpath(price_xpath))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url.strip()\n                s.title = title.strip()\n                s.author = authors.strip()\n                s.price = price.strip()\n                s.detail_item = asin.strip()\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Kindle'\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        pass\n\n", 
  "biblio": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2012, Alex Stanev <alex@stanev.org>'\n__docformat__ = 'restructuredtext en'\n\nimport re\n\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass BiblioStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = 'http://biblio.bg/feed.opds.php'\n    web_url = 'http://biblio.bg/'\n\n    def search(self, query, max_results=10, timeout=60):\n        # check for cyrillic symbols before performing search\n        uquery = unicode(query.strip(), 'utf-8')\n        reObj = re.search(u'^[\u0430-\u044f\u0410-\u042f\\\\d\\\\s]{3,}$', uquery)\n        if not reObj:\n            return\n\n        for s in OpenSearchOPDSStore.search(self, query, max_results, timeout):\n            yield s\n\n    def get_details(self, search_result, timeout):\n        # get format and DRM status\n        from calibre import browser\n        from contextlib import closing\n        from lxml import html\n\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            search_result.formats = ''\n            if idata.xpath('.//span[@class=\"format epub\"]'):\n                search_result.formats = 'EPUB'\n\n            if idata.xpath('.//span[@class=\"format pdf\"]'):\n                if search_result.formats == '':\n                    search_result.formats = 'PDF'\n                else:\n                    search_result.formats.join(', PDF')\n\n            if idata.xpath('.//span[@class=\"format nodrm-icon\"]'):\n                search_result.drm = SearchResult.DRM_UNLOCKED\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n\n        return True\n", 
  "beam_ebooks_de": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass BeamEBooksDEStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://klick.affiliwelt.net/klick.php?bannerid=10072&pid=32307&prid=908'\n        url_details = ('http://klick.affiliwelt.net/klick.php?'\n                       'bannerid=66830&pid=32307&prid=908&'\n                       'url=http://www.beam-ebooks.de/ebook/{0}')\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details.format(detail_item)\n\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details.format(detail_item)\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.beam-ebooks.de/suchergebnis.php?Type=&limit={0}&sw={1}'.format(\n                                                    max_results, urllib2.quote(query))\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//table[tr/td/div[@class=\"stil2\"]]'):\n                if counter <= 0:\n                    break\n\n                id_ = ''.join(data.xpath('./tr/td[1]/a/@href')).strip()\n                if not id_:\n                    continue\n                id_ = id_[7:]\n                cover_url = ''.join(data.xpath('./tr/td[1]/a/img/@src'))\n                if cover_url:\n                    cover_url = 'http://www.beam-ebooks.de' + cover_url\n                temp = ''.join(data.xpath('./tr/td[1]/a/img/@alt'))\n                colon = temp.find(':')\n                if not temp.startswith('eBook') or colon < 0:\n                    continue\n                author = temp[5:colon]\n                title = temp[colon+1:]\n                price = ''.join(data.xpath('./tr/td[3]/text()'))\n                pdf = data.xpath(\n                        'boolean(./tr/td[3]/a/img[contains(@alt, \"PDF\")]/@alt)')\n                epub = data.xpath(\n                        'boolean(./tr/td[3]/a/img[contains(@alt, \"ePub\")]/@alt)')\n                mobi = data.xpath(\n                        'boolean(./tr/td[3]/a/img[contains(@alt, \"Mobipocket\")]/@alt)')\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.detail_item = id_\n                formats = []\n                if epub:\n                    formats.append('ePub')\n                if pdf:\n                    formats.append('PDF')\n                if mobi:\n                    formats.append('MOBI')\n                s.formats = ', '.join(formats)\n\n                yield s\n\n", 
  "bn": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass BNStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = \"http://bn.com\"\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.barnesandnoble.com/s/%s?keyword=%s&store=ebook&view=list' % (query.replace(' ', '-'), urllib.quote_plus(query))\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            raw = f.read()\n            doc = html.fromstring(raw)\n            for data in doc.xpath('//ol[contains(@class, \"result-set\")]/li[contains(@class, \"result\")]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[contains(@class, \"image-block\")]/a/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''\n                cover_id = ''.join(data.xpath('.//img[contains(@class, \"product-image\")]/@id'))\n                m = re.search(r\"%s'.*?srcUrl: '(?P<iurl>.*?)'.*?}\" % cover_id, raw)\n                if m:\n                    cover_url = m.group('iurl')\n\n                title = ''.join(data.xpath('descendant::p[@class=\"title\"]//span[@class=\"name\"]//text()')).strip()\n                if not title:\n                    continue\n\n                author = ', '.join(data.xpath('.//ul[contains(@class, \"contributors\")]//a[contains(@class, \"subtle\")]//text()')).strip()\n                price = ''.join(data.xpath('.//a[contains(@class, \"bn-price\")]//text()'))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = id.strip()\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Nook'\n\n                yield s\n", 
  "amazon_de": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom contextlib import closing\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre.gui2.store import StorePlugin\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass AmazonDEKindleStore(StorePlugin):\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    aff_id = {'tag': 'charhale0a-21'}\n    store_link = ('http://www.amazon.de/gp/redirect.html?ie=UTF8&site-redirect=de'\n                 '&tag=%(tag)s&linkCode=ur2&camp=1638&creative=19454'\n                 '&location=http://www.amazon.de/ebooks-kindle/b?node=530886031')\n    store_link_details = ('http://www.amazon.de/gp/redirect.html?ie=UTF8'\n                          '&location=http://www.amazon.de/dp/%(asin)s&site-redirect=de'\n                          '&tag=%(tag)s&linkCode=ur2&camp=1638&creative=6742')\n    search_url = 'http://www.amazon.de/s/?url=search-alias%3Ddigital-text&field-keywords='\n\n    author_article = 'von '\n\n    and_word = ' und '\n\n    # ---- Copy from here to end\n\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        store_link = self.store_link % self.aff_id\n        if detail_item:\n            self.aff_id['asin'] = detail_item\n            store_link = self.store_link_details % self.aff_id\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.search_url + query.encode('ascii', 'backslashreplace').replace('%', '%25').replace('\\\\x', '%').replace(' ', '+')\n        #print(url)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            allText = f.read()\n            doc = html.fromstring(allText)#.decode('latin-1', 'replace'))\n\n            if doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"grid\")]'):\n                #print('grid form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"ilresults\")]'):\n                #print('ilo form')\n                data_xpath = '//li[(@class=\"ilo\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                # Results can be in a grid (table) or a column\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"list\")]'):\n                #print('list form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            else:\n                # URK -- whats this?\n                print('unknown result table form for Amazon EU search')\n                #with open(\"c:/amazon_search_results.html\", \"w\") as out:\n                #    out.write(allText)\n                return\n\n\n            for data in doc.xpath(data_xpath):\n                if counter <= 0:\n                    break\n\n                # Even though we are searching digital-text only Amazon will still\n                # put in results for non Kindle books (authors pages). Se we need\n                # to explicitly check if the item is a Kindle book and ignore it\n                # if it isn't.\n                format_ = ''.join(data.xpath(format_xpath))\n                if 'kindle' not in format_.lower():\n                    continue\n\n                # We must have an asin otherwise we can't easily reference the\n                # book later.\n                asin = data.xpath(asin_xpath)\n                if asin:\n                    asin = asin[0]\n                else:\n                    continue\n\n                cover_url = ''.join(data.xpath(cover_xpath))\n\n                title = ''.join(data.xpath(title_xpath))\n\n                authors = ''.join(data.xpath(author_xpath))\n                authors = re.sub('^' + self.author_article, '', authors)\n                authors = re.sub(self.and_word, ' & ', authors)\n                mo = re.match(r'(.*)(\\(\\d.*)$', authors)\n                if mo:\n                    authors = mo.group(1).strip()\n\n                price = ''.join(data.xpath(price_xpath))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url.strip()\n                s.title = title.strip()\n                s.author = authors.strip()\n                s.price = price.strip()\n                s.detail_item = asin.strip()\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Kindle'\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        pass\n\n", 
  "amazon": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport random\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass AmazonKindleStore(StorePlugin):\n\n    search_url = 'http://www.amazon.com/s/?url=search-alias%3Ddigital-text&field-keywords='\n    details_url = 'http://amazon.com/dp/'\n    drm_search_text = u'Simultaneous Device Usage'\n    drm_free_text = u'Unlimited'\n\n    def open(self, parent=None, detail_item=None, external=False):\n        '''\n        Amazon comes with a number of difficulties.\n\n        QWebView has major issues with Amazon.com. The largest of\n        issues is it simply doesn't work on a number of pages.\n\n        When connecting to a number parts of Amazon.com (Kindle library\n        for instance) QNetworkAccessManager fails to connect with a\n        NetworkError of 399 - ProtocolFailure. The strange thing is,\n        when I check QNetworkRequest.HttpStatusCodeAttribute when the\n        399 error is returned the status code is 200 (Ok). However, once\n        the QNetworkAccessManager decides there was a NetworkError it\n        does not download the page from Amazon. So I can't even set the\n        HTML in the QWebView myself.\n\n        There is http://bugreports.qt.nokia.com/browse/QTWEBKIT-259 an\n        open bug about the issue but it is not correct. We can set the\n        useragent (Arora does) to something else and the above issue\n        will persist. This http://developer.qt.nokia.com/forums/viewthread/793\n        gives a bit more information about the issue but as of now (27/Feb/2011)\n        there is no solution or work around.\n\n        We cannot change the The linkDelegationPolicy to allow us to avoid\n        QNetworkAccessManager because it only works links. Forms aren't\n        included so the same issue persists on any part of the site (login)\n        that use a form to load a new page.\n\n        Using an aStore was evaluated but I've decided against using it.\n        There are three major issues with an aStore. Because checkout is\n        handled by sending the user to Amazon we can't put it in a QWebView.\n        If we're sending the user to Amazon sending them there directly is\n        nicer. Also, we cannot put the aStore in a QWebView and let it open the\n        redirection the users default browser because the cookies with the\n        shopping cart won't transfer.\n\n        Another issue with the aStore is how it handles the referral. It only\n        counts the referral for the items in the shopping card / the item\n        that directed the user to Amazon. Kindle books do not use the shopping\n        cart and send the user directly to Amazon for the purchase. In this\n        instance we would only get referral credit for the one book that the\n        aStore directs to Amazon that the user buys. Any other purchases we\n        won't get credit for.\n\n        The last issue with the aStore is performance. Even though it's an\n        Amazon site it's alow. So much slower than Amazon.com that it makes\n        me not want to browse books using it. The look and feel are lesser\n        issues. So is the fact that it almost seems like the purchase is\n        with calibre. This can cause some support issues because we can't\n        do much for issues with Amazon.com purchase hiccups.\n\n        Another option that was evaluated was the Product Advertising API.\n        The reasons against this are complexity. It would take a lot of work\n        to basically re-create Amazon.com within calibre. The Product\n        Advertising API is also designed with being run on a server not\n        in an app. The signing keys would have to be made avaliable to ever\n        calibre user which means bad things could be done with our account.\n\n        The Product Advertising API also assumes the same browser for easy\n        shopping cart transfer to Amazon. With QWebView not working and there\n        not being an easy way to transfer cookies between a QWebView and the\n        users default browser this won't work well.\n\n        We could create our own website on the calibre server and create an\n        Amazon Product Advertising API store. However, this goes back to the\n        complexity argument. Why spend the time recreating Amazon.com\n\n        The final and largest issue against using the Product Advertising API\n        is the Efficiency Guidelines:\n\n        \"Each account used to access the Product Advertising API will be allowed\n        an initial usage limit of 2,000 requests per hour. Each account will\n        receive an additional 500 requests per hour (up to a maximum of 25,000\n        requests per hour) for every $1 of shipped item revenue driven per hour\n        in a trailing 30-day period. Usage thresholds are recalculated daily based\n        on revenue performance.\"\n\n        With over two million users a limit of 2,000 request per hour could\n        render our store unusable for no other reason than Amazon rate\n        limiting our traffic.\n\n        The best (I use the term lightly here) solution is to open Amazon.com\n        in the users default browser and set the affiliate id as part of the url.\n        '''\n        aff_id = {'tag': 'josbl0e-cpb-20'}\n        # Use Kovid's affiliate id 30% of the time.\n        if random.randint(1, 10) in (1, 2, 3):\n            aff_id['tag'] = 'calibrebs-20'\n        store_link = 'http://www.amazon.com/Kindle-eBooks/b/?ie=UTF&node=1286228011&ref_=%(tag)s&ref=%(tag)s&tag=%(tag)s&linkCode=ur2&camp=1789&creative=390957' % aff_id\n        if detail_item:\n            aff_id['asin'] = detail_item\n            store_link = 'http://www.amazon.com/dp/%(asin)s/?tag=%(tag)s' % aff_id\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.search_url + query.encode('ascii', 'backslashreplace').replace('%', '%25').replace('\\\\x', '%').replace(' ', '+')\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n\n            if doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"grid\")]'):\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"ilresults\")]'):\n                data_xpath = '//li[(@class=\"ilo\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                # Results can be in a grid (table) or a column\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"list\")]'):\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            else:\n                return\n\n            for data in doc.xpath(data_xpath):\n                if counter <= 0:\n                    break\n\n                # Even though we are searching digital-text only Amazon will still\n                # put in results for non Kindle books (author pages). Se we need\n                # to explicitly check if the item is a Kindle book and ignore it\n                # if it isn't.\n                format = ''.join(data.xpath(format_xpath))\n                if 'kindle' not in format.lower():\n                    continue\n\n                # We must have an asin otherwise we can't easily reference the\n                # book later.\n                asin = data.xpath(asin_xpath)\n                if asin:\n                    asin = asin[0]\n                else:\n                    continue\n\n                cover_url = ''.join(data.xpath(cover_xpath))\n\n                title = ''.join(data.xpath(title_xpath))\n                author = ''.join(data.xpath(author_xpath))\n                try:\n                    author = author.split('by ', 1)[1].split(\" (\")[0]\n                except:\n                    pass\n\n                price = ''.join(data.xpath(price_xpath))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url.strip()\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = asin.strip()\n                s.formats = 'Kindle'\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        url = self.details_url\n\n        br = browser()\n        with closing(br.open(url + search_result.detail_item, timeout=timeout)) as nf:\n            idata = html.fromstring(nf.read())\n            if idata.xpath('boolean(//div[@class=\"content\"]//li/b[contains(text(), \"' +\n                           self.drm_search_text + '\")])'):\n                if idata.xpath('boolean(//div[@class=\"content\"]//li[contains(., \"' +\n                               self.drm_free_text + '\") and contains(b, \"' +\n                               self.drm_search_text + '\")])'):\n                    search_result.drm = SearchResult.DRM_UNLOCKED\n                else:\n                    search_result.drm = SearchResult.DRM_UNKNOWN\n            else:\n                search_result.drm = SearchResult.DRM_LOCKED\n        return True\n", 
  "xinxii": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import etree\n\nfrom calibre import browser\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.opensearch_store import OpenSearchOPDSStore\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass XinXiiStore(BasicStoreConfig, OpenSearchOPDSStore):\n\n    open_search_url = 'http://www.xinxii.com/catalog-search/'\n    web_url = 'http://xinxii.com/'\n\n    # http://www.xinxii.com/catalog/\n\n    def search(self, query, max_results=10, timeout=60):\n        '''\n        XinXii's open search url is:\n        http://www.xinxii.com/catalog-search/query/?keywords={searchTerms}&amp;pw={startPage?}&amp;doc_lang={docLang}&amp;ff={docFormat},{docFormat},{docFormat}\n\n        This url requires the docLang and docFormat. However, the search itself\n        sent to XinXii does not require them. They can be ignored. We cannot\n        push this into the stanard OpenSearchOPDSStore search because of the\n        required attributes.\n\n        XinXii doesn't return all info supported by OpenSearchOPDSStore search\n        function so this one is modified to remove parts that are used.\n        '''\n\n        url = 'http://www.xinxii.com/catalog-search/query/?keywords=' + urllib.quote_plus(query)\n\n        counter = max_results\n        br = browser()\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = etree.fromstring(f.read())\n            for data in doc.xpath('//*[local-name() = \"entry\"]'):\n                if counter <= 0:\n                    break\n\n                counter -= 1\n\n                s = SearchResult()\n\n                s.detail_item = ''.join(data.xpath('./*[local-name() = \"id\"]/text()')).strip()\n\n                for link in data.xpath('./*[local-name() = \"link\"]'):\n                    rel = link.get('rel')\n                    href = link.get('href')\n                    type = link.get('type')\n\n                    if rel and href and type:\n                        if rel in ('http://opds-spec.org/thumbnail', 'http://opds-spec.org/image/thumbnail'):\n                            s.cover_url = href\n                        if rel == 'alternate':\n                            s.detail_item = href\n\n                s.formats = 'EPUB, PDF'\n\n                s.title = ' '.join(data.xpath('./*[local-name() = \"title\"]//text()')).strip()\n                s.author = ', '.join(data.xpath('./*[local-name() = \"author\"]//*[local-name() = \"name\"]//text()')).strip()\n\n                price_e = data.xpath('.//*[local-name() = \"price\"][1]')\n                if price_e:\n                    price_e = price_e[0]\n                    currency_code = price_e.get('currencycode', '')\n                    price = ''.join(price_e.xpath('.//text()')).strip()\n                    s.price = currency_code + ' ' + price\n                    s.price = s.price.strip()\n\n\n                yield s\n", 
  "amazon_fr": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom contextlib import closing\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre.gui2.store import StorePlugin\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store.search_result import SearchResult\n\nclass AmazonFRKindleStore(StorePlugin):\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    aff_id = {'tag': 'charhale-21'}\n    store_link = 'http://www.amazon.fr/livres-kindle/b?ie=UTF8&node=695398031&ref_=sa_menu_kbo1&_encoding=UTF8&tag=%(tag)s&linkCode=ur2&camp=1642&creative=19458' % aff_id\n    store_link_details = 'http://www.amazon.fr/gp/redirect.html?ie=UTF8&location=http://www.amazon.fr/dp/%(asin)s&tag=%(tag)s&linkCode=ur2&camp=1634&creative=6738'\n    search_url = 'http://www.amazon.fr/s/?url=search-alias%3Ddigital-text&field-keywords='\n\n    author_article = 'de '\n\n    and_word = ' et '\n\n    # ---- Copy from here to end\n\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        store_link = self.store_link % self.aff_id\n        if detail_item:\n            self.aff_id['asin'] = detail_item\n            store_link = self.store_link_details % self.aff_id\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.search_url + query.encode('ascii', 'backslashreplace').replace('%', '%25').replace('\\\\x', '%').replace(' ', '+')\n        #print(url)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            allText = f.read()\n            doc = html.fromstring(allText)#.decode('latin-1', 'replace'))\n\n            if doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"grid\")]'):\n                #print('grid form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"ilresults\")]'):\n                #print('ilo form')\n                data_xpath = '//li[(@class=\"ilo\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                # Results can be in a grid (table) or a column\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"list\")]'):\n                #print('list form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            else:\n                # URK -- whats this?\n                print('unknown result table form for Amazon EU search')\n                #with open(\"c:/amazon_search_results.html\", \"w\") as out:\n                #    out.write(allText)\n                return\n\n\n            for data in doc.xpath(data_xpath):\n                if counter <= 0:\n                    break\n\n                # Even though we are searching digital-text only Amazon will still\n                # put in results for non Kindle books (authors pages). Se we need\n                # to explicitly check if the item is a Kindle book and ignore it\n                # if it isn't.\n                format_ = ''.join(data.xpath(format_xpath))\n                if 'kindle' not in format_.lower():\n                    continue\n\n                # We must have an asin otherwise we can't easily reference the\n                # book later.\n                asin = data.xpath(asin_xpath)\n                if asin:\n                    asin = asin[0]\n                else:\n                    continue\n\n                cover_url = ''.join(data.xpath(cover_xpath))\n\n                title = ''.join(data.xpath(title_xpath))\n\n                authors = ''.join(data.xpath(author_xpath))\n                authors = re.sub('^' + self.author_article, '', authors)\n                authors = re.sub(self.and_word, ' & ', authors)\n                mo = re.match(r'(.*)(\\(\\d.*)$', authors)\n                if mo:\n                    authors = mo.group(1).strip()\n\n                price = ''.join(data.xpath(price_xpath))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url.strip()\n                s.title = title.strip()\n                s.author = authors.strip()\n                s.price = price.strip()\n                s.detail_item = asin.strip()\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Kindle'\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        pass\n\n", 
  "whsmith_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass WHSmithUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.whsmith.co.uk/'\n        url_details = ''\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = url_details + detail_item\n            open_url(QUrl(url))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url_details + detail_item\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = ('http://www.whsmith.co.uk/search?keywordCategoryId=wc_dept_ebooks&results=60'\n               '&page=1&keywords=' + urllib2.quote(query))\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//li[@class=\"product\"]'):\n                if counter <= 0:\n                    break\n                id_ = ''.join(data.xpath('./a[@class=\"product_image_wrap\"]/@href'))\n                if not id_:\n                    continue\n                id_ = 'http://www.whsmith.co.uk' + id_\n                cover_url = ''.join(data.xpath('.//img[@class=\"product_image\"]/@src'))\n                title = ''.join(data.xpath('.//h4[@class=\"product_title\"]/text()'))\n                author = ', '.join(data.xpath('.//span[@class=\"product_second\"]/text()'))\n                price = ''.join(data.xpath('.//span[@class=\"price\"]/text()'))\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.drm = SearchResult.DRM_LOCKED\n                s.detail_item = id_\n                s.formats = 'ePub'\n\n                yield s\n", 
  "mills_boon_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib2\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass MillsBoonUKStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://www.awin1.com/awclick.php?mid=1150&id=120917'\n        detail_url = 'http://www.awin1.com/cread.php?awinmid=1150&awinaffid=120917&clickref=&p='\n\n        if external or self.config.get('open_external', False):\n            if detail_item:\n                url = detail_url + detail_item\n            open_url(QUrl(url_slash_cleaner(url)))\n        else:\n            detail_url = None\n            if detail_item:\n                detail_url = url + detail_item\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        base_url = 'http://www.millsandboon.co.uk'\n        url = base_url + '/search?format=ebook&q=' + urllib2.quote(query)\n        #print(url)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//article[contains(@class, \"group\")]'):\n                if counter <= 0:\n                    break\n                id_ = ''.join(data.xpath('.//div[@class=\"img-wrapper\"]/a/@href')).strip()\n                id_ = base_url + id_\n                if not id_:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"img-wrapper\"]/a/img/@src'))\n                title =  ''.join(data.xpath('.//div[@class=\"img-wrapper\"]/a/img/@alt')).strip()\n                author = ''.join(data.xpath('.//a[@class=\"author\"]/text()'))\n                price = ''.join(data.xpath('.//li[@class=\"productAttribute\" and child::span[text()=\"eBook\"]]/input/@value'))\n                format_ = ''.join(data.xpath('.//p[@class=\"doc-meta-format\"]/span[last()]/text()'))\n                drm = SearchResult.DRM_LOCKED\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price\n                s.detail_item = id_\n                s.drm = drm\n                s.formats = format_\n\n                yield s\n", 
  "sony": "#!/usr/bin/env python\n#:ts=4:sw=4:sta:et:sts=4:fdm=marker:ai\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__   = 'GPL v3'\n__copyright__ = '2012, Kovid Goyal <kovid at kovidgoyal.net>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html, etree\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass SonyStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        if detail_item:\n            if external or self.config.get('open_external', False):\n                open_url(QUrl(url_slash_cleaner(detail_item)))\n            else:\n                d = WebStoreDialog(self.gui, 'http://ebookstore.sony.com', parent, detail_item)\n                d.setWindowTitle(self.name)\n                d.set_tags(self.config.get('tags', ''))\n                d.exec_()\n        else:\n            open_url(QUrl('http://ebookstore.sony.com'))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://ebookstore.sony.com/search?keyword=%s'%urllib.quote_plus(\n                query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for item in doc.xpath('//div[contains(@class, \"searchResult\")]/'\n                    'descendant::li[contains(@class, \"hreview\")]'):\n                if counter <= 0:\n                    break\n\n                curr = ''.join(item.xpath('descendant::div[@class=\"pricing\"]/p[@class=\"price money\"]/descendant::*[@class=\"currency\"]/@title')).strip()\n                amt = ''.join(item.xpath('descendant::div[@class=\"pricing\"]/p[@class=\"price money\"]/descendant::*[@class=\"amount\"]/text()')).strip()\n                s = SearchResult()\n                s.price = (curr+' '+amt) if (curr and amt) else _('Not Available')\n                title = item.xpath('descendant::h3[@class=\"item\"]')\n                if not title:\n                    continue\n                title = etree.tostring(title[0], method='text',\n                        encoding=unicode)\n                if not title:\n                    continue\n                s.title = title.strip()\n                s.author = ''.join(item.xpath(\n                        'descendant::li[contains(@class, \"author\")]/'\n                        'a[@class=\"fn\"]/text()')).strip()\n                if not s.author:\n                    continue\n                detail_url = ''.join(item.xpath('descendant::h3[@class=\"item\"]'\n                    '/descendant::a[@class=\"fn\" and @href]/@href'))\n                if not detail_url:\n                    continue\n                if detail_url.startswith('/'):\n                    detail_url = 'http:'+detail_url\n                s.detail_item = detail_url\n\n                counter -= 1\n\n                cover_url = ''.join(item.xpath(\n                    'descendant::li[@class=\"coverart\"]/'\n                    'descendant::img[@src]/@src'))\n                if cover_url:\n                    if cover_url.startswith('//'):\n                        cover_url = 'http:' + cover_url\n                    elif cover_url.startswith('/'):\n                        cover_url = 'http://ebookstore.sony.com'+cover_url\n                    s.cover_url = url_slash_cleaner(cover_url)\n\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Sony'\n\n                yield s\n\n", 
  "allegro": "# -*-\n\nfrom __future__ import (division, absolute_import, print_function, unicode_literals)\nstore_version = 1  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2013, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass AllegroStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/34/58/'\n\n        url = 'http://ebooki.allegro.pl/'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n\n        br = browser()\n        page=1\n\n        counter = max_results\n        while counter:\n            with closing(br.open('http://ebooki.allegro.pl/szukaj?fraza=' + urllib.quote(query) + '&strona=' + str(page), timeout=timeout)) as f:\n                doc = html.fromstring(f.read().decode('utf-8'))\n                for data in doc.xpath('//div[@class=\"listing-list\"]/div[@class=\"listing-list-item\"]'):\n                    if counter <= 0:\n                        break\n\n                    id = ''.join(data.xpath('.//div[@class=\"listing-cover-wrapper\"]/a/@href'))\n                    if not id:\n                        continue\n\n                    cover_url = ''.join(data.xpath('.//div[@class=\"listing-cover-wrapper\"]/a/img/@src'))\n                    title = ''.join(data.xpath('.//div[@class=\"listing-info\"]/div[1]/a/text()'))\n                    author = ', '.join(data.xpath('.//div[@class=\"listing-info\"]/div[2]/a/text()'))\n                    price = ''.join(data.xpath('.//div[@class=\"book-price\"]/text()'))\n                    formats = ', '.join(data.xpath('.//div[@class=\"listing-buy-formats\"]//div[@class=\"devices-wrapper\"]/span[@class=\"device-label\"]/span/text()'))\n\n                    counter -= 1\n\n                    s = SearchResult()\n                    s.cover_url = 'http://ebooki.allegro.pl/' + cover_url\n                    s.title = title.strip()\n                    s.author = author.strip()\n                    s.price = price\n                    s.detail_item = 'http://ebooki.allegro.pl/' + id[1:]\n                    s.formats = formats.upper()\n                    s.drm = SearchResult.DRM_UNLOCKED\n\n                    yield s\n                if not doc.xpath('//a[@class=\"paging-arrow right-paging-arrow\"]'):\n                    break\n            page+=1\n", 
  "weightless_books": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass WeightlessBooksStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://weightlessbooks.com/'\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://weightlessbooks.com/?s=' + urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//li[@class=\"product\"]'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//div[@class=\"cover\"]/a/@href'))\n                if not id:\n                    continue\n\n                cover_url = ''.join(data.xpath('.//div[@class=\"cover\"]/a/img/@src'))\n\n                price = ''.join(data.xpath('.//div[@class=\"buy_buttons\"]/b[1]/text()'))\n                if not price:\n                    continue\n\n                formats = ', '.join(data.xpath('.//select[@class=\"eStore_variation\"]//option//text()'))\n                formats = formats.upper()\n\n                title = ''.join(data.xpath('.//h3/a/text()'))\n                author = ''.join(data.xpath('.//h3//text()'))\n                author = author.replace(title, '')\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = price.strip()\n                s.detail_item = id.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.formats = formats\n\n                yield s\n", 
  "google_books": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 2  # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass GoogleBooksStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        url = 'http://books.google.com/books'\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_item if detail_item else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_item)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.google.com/search?tbm=bks&q=' + urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//ol/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//h3/a/@href'))\n                if not id:\n                    continue\n\n                title = ''.join(data.xpath('.//h3/a//text()'))\n                authors = data.xpath('.//span[contains(@class, \"f\")]//a//text()')\n                while authors and authors[-1].strip().lower() in ('preview', 'read', 'more editions'):\n                    authors = authors[:-1]\n                if not authors:\n                    continue\n                author = ', '.join(authors)\n\n                counter -= 1\n\n                s = SearchResult()\n                s.title = title.strip()\n                s.author = author.strip()\n                s.detail_item = id.strip()\n                s.drm = SearchResult.DRM_UNKNOWN\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        br = browser()\n        with closing(br.open(search_result.detail_item, timeout=timeout)) as nf:\n            doc = html.fromstring(nf.read())\n\n            search_result.cover_url = ''.join(doc.xpath('//div[@class=\"sidebarcover\"]//img/@src'))\n\n            # Try to get the set price.\n            price = ''.join(doc.xpath('//div[@id=\"gb-get-book-container\"]//a/text()'))\n            if 'read' in price.lower():\n                price = 'Unknown'\n            elif 'free' in price.lower() or not price.strip():\n                price = '$0.00'\n            elif '-' in price:\n                a, b, price = price.partition(' - ')\n            search_result.price = price.strip()\n\n            search_result.formats = ', '.join(doc.xpath('//div[contains(@class, \"download-panel-div\")]//a/text()')).upper()\n            if not search_result.formats:\n                search_result.formats = _('Unknown')\n\n        return True\n\n", 
  "ebooks_com": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 1 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport random\nimport re\nimport urllib\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass EbookscomStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        m_url = 'http://www.dpbolvw.net/'\n        h_click = 'click-4879827-10364500'\n        d_click = 'click-4879827-10281551'\n        # Use Kovid's affiliate id 30% of the time.\n        if random.randint(1, 10) in (1, 2, 3):\n            h_click = 'click-4913808-10364500'\n            d_click = 'click-4913808-10281551'\n\n        url = m_url + h_click\n        detail_url = None\n        if detail_item:\n            detail_url = m_url + d_click + detail_item\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=10, timeout=60):\n        url = 'http://www.ebooks.com/SearchApp/SearchResults.net?term=' + urllib.quote_plus(query)\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@id=\"results\"]//li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[1]/@href'))\n                mo = re.search('\\d+', id)\n                if not mo:\n                    continue\n                id = mo.group()\n\n                cover_url = ''.join(data.xpath('.//div[contains(@class, \"img\")]//img/@src'))\n\n                title = ''.join(data.xpath(\n                    'descendant::span[@class=\"book-title\"]/a/text()')).strip()\n                author = ', '.join(data.xpath(\n                    'descendant::span[@class=\"author\"]/a/text()')).strip()\n                if not title or not author:\n                    continue\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url\n                s.title = title.strip()\n                s.author = author.strip()\n                s.detail_item = '?url=http://www.ebooks.com/cj.asp?IID=' + id.strip() + '&cjsku=' + id.strip()\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        url = 'http://www.ebooks.com/ebooks/book_display.asp?IID='\n\n        mo = re.search(r'\\?IID=(?P<id>\\d+)', search_result.detail_item)\n        if mo:\n            id = mo.group('id')\n        if not id:\n            return\n\n        price = _('Not Available')\n        br = browser()\n        with closing(br.open(url + id, timeout=timeout)) as nf:\n            pdoc = html.fromstring(nf.read())\n\n            price_l = pdoc.xpath('//div[@class=\"book-info\"]/div[@class=\"price\"]/text()')\n            if price_l:\n                price = price_l[0]\n            search_result.price = price.strip()\n\n            search_result.drm = SearchResult.DRM_UNLOCKED\n            permissions = ' '.join(pdoc.xpath('//div[@class=\"permissions-items\"]//text()'))\n            if 'off' in permissions:\n                search_result.drm = SearchResult.DRM_LOCKED\n\n            fdata = pdoc.xpath('//div[contains(@class, \"more-links\") and contains(@class, \"more-links-info\")]/div//span/text()')\n            if len(fdata) > 1:\n                search_result.formats = ', '.join(fdata[1:])\n\n        return True\n", 
  "ebookpoint": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011-2013, Tomasz D\u0142ugosz <tomek3d@gmail.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nimport urllib\nfrom base64 import b64encode\nfrom contextlib import closing\n\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser, url_slash_cleaner\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.basic_config import BasicStoreConfig\nfrom calibre.gui2.store.search_result import SearchResult\nfrom calibre.gui2.store.web_store_dialog import WebStoreDialog\n\nclass EbookpointStore(BasicStoreConfig, StorePlugin):\n\n    def open(self, parent=None, detail_item=None, external=False):\n        aff_root = 'https://www.a4b-tracking.com/pl/stat-click-text-link/32/58/'\n\n        url = 'http://ebookpoint.pl/'\n\n        aff_url = aff_root + str(b64encode(url))\n\n        detail_url = None\n        if detail_item:\n            detail_url = aff_root + str(b64encode(detail_item))\n\n        if external or self.config.get('open_external', False):\n            open_url(QUrl(url_slash_cleaner(detail_url if detail_url else aff_url)))\n        else:\n            d = WebStoreDialog(self.gui, url, parent, detail_url if detail_url else aff_url)\n            d.setWindowTitle(self.name)\n            d.set_tags(self.config.get('tags', ''))\n            d.exec_()\n\n    def search(self, query, max_results=25, timeout=60):\n        url = 'http://ebookpoint.pl/search.scgi?szukaj=' + urllib.quote_plus(query.decode('utf-8').encode('iso-8859-2')) + '&serwisyall=0&x=0&y=0'\n\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            doc = html.fromstring(f.read())\n            for data in doc.xpath('//div[@class=\"book-list\"]/ul[2]/li'):\n                if counter <= 0:\n                    break\n\n                id = ''.join(data.xpath('.//a[@class=\"cover\"]/@href'))\n                if not id:\n                    continue\n\n                formats = ', '.join(data.xpath('.//div[@class=\"ikony\"]/span/text()'))\n                if formats in ['MP3','']:\n                    continue\n                cover_url = ''.join(data.xpath('.//a[@class=\"cover\"]/img/@src'))\n                title = ''.join(data.xpath('.//h3/a/@title'))\n                title = re.sub('eBook.', '', title)\n                author = ''.join(data.xpath('.//p[@class=\"author\"]//text()'))\n                price = ''.join(data.xpath('.//p[@class=\"price\"]/ins/text()'))\n\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = 'http://ebookpoint.pl' + re.sub('72x9', '65x8',cover_url)\n                s.title = title.strip()\n                s.author = author.strip()\n                s.price = re.sub(r'\\.',',',price)\n                s.detail_item = id.strip()\n                s.drm = SearchResult.DRM_UNLOCKED\n                s.formats = formats.upper()\n\n                yield s\n", 
  "amazon_uk": "# -*-\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\nstore_version = 5 # Needed for dynamic plugin loading\n\n__license__ = 'GPL 3'\n__copyright__ = '2011, John Schember <john@nachtimwald.com>'\n__docformat__ = 'restructuredtext en'\n\nimport re\nfrom contextlib import closing\nfrom lxml import html\n\nfrom PyQt5.Qt import QUrl\n\nfrom calibre import browser\nfrom calibre.gui2 import open_url\nfrom calibre.gui2.store import StorePlugin\nfrom calibre.gui2.store.search_result import SearchResult\n\n\n\nclass AmazonUKKindleStore(StorePlugin):\n    aff_id = {'tag': 'calcharles-21'}\n    store_link = ('http://www.amazon.co.uk/gp/redirect.html?ie=UTF8&'\n                  'location=http://www.amazon.co.uk/Kindle-eBooks/b?'\n                  'ie=UTF8&node=341689031&ref_=sa_menu_kbo2&tag=%(tag)s&'\n                  'linkCode=ur2&camp=1634&creative=19450')\n    store_link_details = ('http://www.amazon.co.uk/gp/redirect.html?ie=UTF8&'\n                          'location=http://www.amazon.co.uk/dp/%(asin)s&tag=%(tag)s&'\n                          'linkCode=ur2&camp=1634&creative=6738')\n    search_url = 'http://www.amazon.co.uk/s/?url=search-alias%3Ddigital-text&field-keywords='\n\n    author_article = 'by '\n\n    and_word = ' and '\n\n    # This code is copy/pasted from from here to the other amazon EU. Do not\n    # modify it in any other amazon EU plugin. Be sure to paste it into all\n    # other amazon EU plugins when modified.\n\n    # ---- Copy from here to end\n\n    '''\n    For comments on the implementation, please see amazon_plugin.py\n    '''\n\n    def open(self, parent=None, detail_item=None, external=False):\n\n        store_link = self.store_link % self.aff_id\n        if detail_item:\n            self.aff_id['asin'] = detail_item\n            store_link = self.store_link_details % self.aff_id\n        open_url(QUrl(store_link))\n\n    def search(self, query, max_results=10, timeout=60):\n        url = self.search_url + query.encode('ascii', 'backslashreplace').replace('%', '%25').replace('\\\\x', '%').replace(' ', '+')\n        #print(url)\n        br = browser()\n\n        counter = max_results\n        with closing(br.open(url, timeout=timeout)) as f:\n            allText = f.read()\n            doc = html.fromstring(allText)#.decode('latin-1', 'replace'))\n\n            if doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"grid\")]'):\n                #print('grid form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"ilresults\")]'):\n                #print('ilo form')\n                data_xpath = '//li[(@class=\"ilo\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './div[@class = \"ilf\"]/a/img[contains(@class, \"ilo\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                # Results can be in a grid (table) or a column\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\") or contains(@class, \"rsltGridList\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            elif doc.xpath('//div[@id = \"atfResults\" and contains(@class, \"list\")]'):\n                #print('list form')\n                data_xpath = '//div[contains(@class, \"prod\")]'\n                format_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and not(contains(@class, \"bld\"))]/text()')\n                asin_xpath = '@name'\n                cover_xpath = './/img[contains(@class, \"productImage\")]/@src'\n                title_xpath = './/h3[@class=\"newaps\"]/a//text()'\n                author_xpath = './/h3[@class=\"newaps\"]//span[contains(@class, \"reg\")]//text()'\n                price_xpath = (\n                        './/ul[contains(@class, \"rsltL\")]'\n                        '//span[contains(@class, \"lrg\") and contains(@class, \"bld\")]/text()')\n            else:\n                # URK -- whats this?\n                print('unknown result table form for Amazon EU search')\n                #with open(\"c:/amazon_search_results.html\", \"w\") as out:\n                #    out.write(allText)\n                return\n\n\n            for data in doc.xpath(data_xpath):\n                if counter <= 0:\n                    break\n\n                # Even though we are searching digital-text only Amazon will still\n                # put in results for non Kindle books (authors pages). Se we need\n                # to explicitly check if the item is a Kindle book and ignore it\n                # if it isn't.\n                format_ = ''.join(data.xpath(format_xpath))\n                if 'kindle' not in format_.lower():\n                    continue\n\n                # We must have an asin otherwise we can't easily reference the\n                # book later.\n                asin = data.xpath(asin_xpath)\n                if asin:\n                    asin = asin[0]\n                else:\n                    continue\n\n                cover_url = ''.join(data.xpath(cover_xpath))\n\n                title = ''.join(data.xpath(title_xpath))\n\n                authors = ''.join(data.xpath(author_xpath))\n                authors = re.sub('^' + self.author_article, '', authors)\n                authors = re.sub(self.and_word, ' & ', authors)\n                mo = re.match(r'(.*)(\\(\\d.*)$', authors)\n                if mo:\n                    authors = mo.group(1).strip()\n\n                price = ''.join(data.xpath(price_xpath))\n\n                counter -= 1\n\n                s = SearchResult()\n                s.cover_url = cover_url.strip()\n                s.title = title.strip()\n                s.author = authors.strip()\n                s.price = price.strip()\n                s.detail_item = asin.strip()\n                s.drm = SearchResult.DRM_UNKNOWN\n                s.formats = 'Kindle'\n\n                yield s\n\n    def get_details(self, search_result, timeout):\n        pass\n\n"
}